--- User Storage
cat /etc/passwd 
sudo usermod -aG docker jenkins --- add user to the group
sudo usermod -aG docker $(id -un)
-----
----password based authentication enable

vi /etc/ssh/sshd_config

#LoginGraceTime 2m
PermitRootLogin yes

# To disable tunneled clear text passwords, change to no here!
PasswordAuthentication yes

service ssh restart
------
---- Docker integration with jenkins
vi /lib/systemd/system/docker.service
ExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2375
-----

-------------------------------------Jenkins Installation Steps--------------------------------------------
sudo su -
sudo apt update

sudo add-apt-repository ppa:openjdk-r/ppa --- Slave Only

sudo apt install openjdk-11-jdk 

sudo update-alternatives --config java  --- Slave Only
java -version

wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > \
    /etc/apt/sources.list.d/jenkins.list'
sudo apt-get update
sudo apt-get install jenkins

sudo systemctl daemon-reload
sudo systemctl start jenkins
sudo systemctl status jenkins

jenkins --version

sudo cat /var/lib/jenkins/secrets/initialAdminPassword

------------------------------------Jenkins Installation Completed--------------------------------------

------------------------------------Maven Installation Steps--------------------------------------------
sudo su -
sudo apt update

sudo apt install openjdk-11-jdk
java -version

sudo apt install maven
mvn --version

-------------------------------------Maven Installation Completed-----------------------------------------

-------------------------------------Docker Installation Steps--------------------------------------------
sudo su -
sudo apt update

curl -sSL https://get.docker.com/ | sh
sudo service docker start
sudo usermod -aG docker $(id -un)

docker --version

-------------------------------------Docker Installation Completed----------------------------------------

-------------------------------------Kubernetes Installation Steps----------------------------------------
sudo su -
sudo apt update

curl https://get.docker.com / | bash

sudo apt-get update && apt-get install -y apt-transport-https curl

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

sudo apt-get update

sudo apt-get install -y kubelet kubeadm kubectl

sudo apt-mark hold kubelet kubeadm kubectl  --- To avoid other users to modify installation

######till here are common for Master and Node

kubeadm init -–pod-network-cidr 192.168.0.0/16 --- Dedicating IP address to all pods
To start using your cluster, you need to run the following as a regular user:
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:
  export KUBECONFIG=/etc/kubernetes/admin.conf
alias ku=’kubectl’
kubectl get nodes
kubectl get pods
kubectl get pods -A
kubectl get ns --- Display namespace
kubectl get pods –n kube-system
kubectl apply -f https://docs.projectcalico.org/v3.14/manifests/calico.yaml  --- Apply network to the master 
kebernetes support only latest two versions 
kubectl get nodes --- Display all modes including master
kubectl get pods –A  --- Display pods in all nodes

kubeadm join 10.0.0.4:6443 --token g5vulj.sum9ysa24ymdhap3 \
        --discovery-token-ca-cert-hash sha256:5f9f454e9ffe964aa99d064d14e5d5827dd78dc274264d71

kubectl describe  node vm-k8s-master  --- To describe master node statistics
cat .kube/config  --- To describe config file
kubeadm token create --print-join-command --- New token will generate to join new node..

kubectl label nodes node-role.kubernetes.io/node01=Node01 --- Creating Label to node
kubectl run testpod1 --image=index.docker.io/sreeharshav/rollingupdate:v3 --- Creating new pod from Master
kubectl get pods -o wide --- To check where the pod is running

------------------------------------Kubernetes Installation Completed-------------------------------------

-------------------------------------Hashicorp Vault Installation Steps------------------------------------
sudo su -
sudo apt update

wget https://releases.hashicorp.com/vault/1.7.2/vault_1.7.2_linux_amd64.zip
apt install unzip
unzip vault_1.7.2_linux_amd64.zip
cp vault /usr/bin
mkdir /etc/vault
mkdir /opt/vault-data
mkdir -p /logs/vault
vi /etc/vault/config.json

{
"listener": [{
"tcp": {
"address" : "0.0.0.0:8200",
"tls_disable" : 1
}
}],
"api_addr": "http://40.88.2.141:8200",
"storage": {
    "file": {
    "path" : "/opt/vault-data"
    }
 },
"max_lease_ttl": "10h",
"default_lease_ttl": "10h",
"ui":true
}

vi /etc/systemd/system/vault.service
------------------------------------
[Unit]
Description=vault service
Requires=network-online.target
After=network-online.target
ConditionFileNotEmpty=/etc/vault/config.json

[Service]
EnvironmentFile=-/etc/sysconfig/vault
Environment=GOMAXPROCS=2
Restart=on-failure
ExecStart=/usr/bin/vault server -config=/etc/vault/config.json
StandardOutput=/logs/vault/output.log
StandardError=/logs/vault/error.log
LimitMEMLOCK=infinity
ExecReload=/bin/kill -HUP $MAINPID
KillSignal=SIGTERM

[Install]
WantedBy=multi-user.target
-----------------------------

systemctl daemon-reload
systemctl start vault.service
systemctl status vault.service
systemctl enable vault.service

Open vault in webUI:
 http://168.62.160.197:8200

---------------------------------Hashicorp Vault Installation Complete-------------------------------
